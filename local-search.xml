<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单词拆分</title>
    <link href="/2024/11/03/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <url>/2024/11/03/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>1、这道题是考察动态规划，特点是它是一个从后向前遍历的过程，遍历顺序很重要；</li><li>2、我们需要将一个字符串，拆分成好几个子字符串，当子字符串都能在wordDict中找到时，显然这个单词就是拆分成功的；</li><li>3、这种父问题和子问题类似的，就可以使用动态规划的方式求解；</li><li>4、首先，如果我们拆到了最后一个字符，显然就成功了，所以我们反向遍历，从后向前，当拆倒第0个字符时，就成功了；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题非常有意思哈，我们在思考的时候，可以从前向后进行思考，但是在推理的时候需要从后向前推理；</span><br>    <span class="hljs-comment">// 1、dp[i]代表以i为起始点的字符串是否可以由wordDict里面的元素拼接而成；</span><br>    <span class="hljs-comment">// 2、显然，我们知道dp[s.size()] = True，因为它不需要任何元素；</span><br>    <span class="hljs-comment">// 3、那么，我们向前计算，假设最后4个字符组成的元素在wordDict存在，那么显然dp[s.size() -4] = True，这里有两个条件，第一是后面4个字符串与wordDict中某个元素完全匹配，第二是dp[s.size()]等于True；</span><br>    <span class="hljs-comment">// 4、需要注意，我们在判断以某个位置为起始点，向后添加wordDict中某个元素的长度时，这个总长度不能超过s的长度，否则就越界了。</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">dp</span>(s.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>        dp[s.<span class="hljs-built_in">size</span>()] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>(); i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordDict.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                string word = wordDict[j];<br>                string sub = s.<span class="hljs-built_in">substr</span>(i, word.<span class="hljs-built_in">size</span>());<br>                <span class="hljs-keyword">if</span> (i + word.<span class="hljs-built_in">size</span>() &lt;= s.<span class="hljs-built_in">size</span>() &amp;&amp; sub == word)&#123;<br>                    dp[i] = dp[i+word.<span class="hljs-built_in">size</span>()];<br>                &#125;<br>                <span class="hljs-comment">// 当遇到一个可以拆分的时候就可以返回了</span><br>                <span class="hljs-keyword">if</span> (dp[i]) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>我们遍历了所有字符，同时每个字符又遍历了所有词典，所以时间复杂度应该是o(m * n)。</li></ul><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ul><li>显然，这里的空间复杂度应该是o(n)，因为我们保存了一个一维数组dp。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最长回文子串</title>
    <link href="/2024/11/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2024/11/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>最长回文子串是动态规划中一道非常经典的题目</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>1、这道题是考察动态规划；</li><li>2、首先，我们需要看到，它需要返回的是子串，而不是int类型的数值；</li><li>3、其次，我们可以知道，dp [i][j]是否是回文子串起始取决于dp [i+1][j-1]；</li><li>4、所以，我们通过两层for循环遍历，不断更新i和j的值，最后得到最长的回文子串；</li><li>5、需要注意，这里i的遍历顺序是从下向上，而j的遍历顺序是从左到右；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、使用动态规划的方法，dp[i][j]表示分别以i为起点和j为终点的子串是否为回文子串</span><br>    <span class="hljs-comment">// 2、当s[i] == s[j]时，才需要判断，这时如果j - i &lt;= 1，显然就是回文子串，否则需要判断dp[i+1][j-1]是否是回文子串；</span><br>    <span class="hljs-comment">// 3、显然，我们可以看出i是从下向上遍历，而j是从左向右遍历</span><br>    <span class="hljs-comment">// 4、最后，遍历的过程中，我们可以不断迭代left和right的位置，最终得到最长子串</span><br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">dp</span>(s.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(s.<span class="hljs-built_in">size</span>(), <span class="hljs-literal">false</span>));<br>        <span class="hljs-type">int</span> max_length = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> left = INT_MAX;<br>        <span class="hljs-type">int</span> right = INT_MIN;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span> (s[i] == s[j])&#123;<br>                    <span class="hljs-keyword">if</span> (j - i &lt;= <span class="hljs-number">1</span> || dp[i<span class="hljs-number">+1</span>][j<span class="hljs-number">-1</span>])&#123;<br>                        dp[i][j] = <span class="hljs-literal">true</span>;<br><br>                        <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> &gt; max_length)&#123;<br>                            left = i;<br>                            right = j;<br>                            max_length = j - i + <span class="hljs-number">1</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(left, max_length);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>这里，我们遍历两遍，时间复杂度是o(n^2)。</li></ul><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li>二维动态数组，显然空间复杂度也是o(n^2)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/03/hello-world/"/>
    <url>/2024/11/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
