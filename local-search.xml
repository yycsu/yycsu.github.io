<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>k个一组翻转链表</title>
    <link href="/2024/11/21/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/11/21/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题首先，实际上可以拆解成翻转链表和递归函数；</li><li>1、首先，head是翻转后的尾节点，pre是翻转后的头节点，cur是翻转后的尾节点的下一个节点；</li><li>2、其次，我们需要将翻转后的尾节点于下一个头节点连接；</li><li>3、这里，仍然需要注意的是如果长度不足，不用翻转，所以每次需要判断一下</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>class Solution {<br>public:<br>    ListNode* reverseKGroup(ListNode* head, int k) {<br>        ListNode* point &#x3D; head;</p><pre><code class="hljs">    for (int i = 0; i &lt; k; i++)&#123;        if (point == nullptr) return head;        point = point-&gt;next;    &#125;    ListNode* pre = nullptr;    ListNode* cur = head;    for(int i = 0; i &lt; k; i++)&#123;        ListNode* nxt = cur-&gt;next;        cur-&gt;next = pre;        pre = cur;        cur = nxt;    &#125;    head-&gt;next = reverseKGroup(cur, k);    return pre;&#125;</code></pre><p>};</p><pre><code class="hljs">### 时间复杂度+ 这里，还是置遍历了一遍，所以时间复杂度是o(n)。### 空间复杂度+ 新增常数变量，空间复杂度o(1)。</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode-链表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>螺旋遍历二维数组</title>
    <link href="/2024/11/21/%E8%9E%BA%E6%97%8B%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <url>/2024/11/21/%E8%9E%BA%E6%97%8B%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>1、考察的实际上是对数组的操作熟练程度，由于需要螺旋打印，所以不好用row（圈数）来控制，而是要用上下左右的边界控制；</li><li>2、注意每次打印时候的边界控制；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>class Solution {<br>public:<br>    vector<int> spiralArray(vector&lt;vector<int>&gt;&amp; array) {<br>        vector<int> result;</p><pre><code class="hljs">    if (array.size() == 0) return result;    int top = 0;    int bottom = array.size()-1;    int left =0;    int right = array[0].size()-1;    while(true)&#123;        for (int i = left; i &lt;= right; i++)&#123;            result.push_back(array[top][i]);        &#125;        top++;        if (top &gt; bottom) break;        for (int i = top; i &lt;= bottom; i++)&#123;            result.push_back(array[i][right]);        &#125;        right--;        if (left &gt; right) break;        for (int i = right; i &gt;= left; i--)&#123;            result.push_back(array[bottom][i]);        &#125;        bottom--;        if (top &gt; bottom) break;        for (int i = bottom; i &gt;= top; i--)&#123;            result.push_back(array[i][left]);        &#125;        left++;        if (left &gt; right) break;    &#125;    return result;&#125;</code></pre><p>};</p><pre><code class="hljs">### 时间复杂度+ 遍历了一整个矩阵，所以时间复杂度为o(m*n)。### 空间复杂度+ 定义了常数个变量，所以空间复杂度为o(1)。</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>寻找重复数</title>
    <link href="/2024/11/21/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <url>/2024/11/21/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>方案一：思路是将某个位置的元素当作下标，将该下标的元素置为负数，当遇到负数的时候，我们就知道该下标即为重复数字；</li><li>方案二：思路是快慢指针，因为while True, point &#x3D; nums[point]，这样如果存在重复数值，就会形成环，那么就类似于快慢指针的问题了，就可以使用环的方法求解。</li></ul><h3 id="代码（方案一）"><a href="#代码（方案一）" class="headerlink" title="代码（方案一）"></a>代码（方案一）</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>public:<br>    <span class="hljs-keyword">int</span> findDuplicate(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++)&#123;<br>            <span class="hljs-keyword">int</span> val = <span class="hljs-keyword">abs</span>(nums[i]);<br><br>            <span class="hljs-keyword">if</span> (nums[val] &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> val;<br><br>            nums[val] = -<span class="hljs-number">1</span> * nums[val];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="代码（方案二）"><a href="#代码（方案二）" class="headerlink" title="代码（方案二）"></a>代码（方案二）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            fast = nums[nums[fast]];<br>            slow = nums[slow];<br>            <span class="hljs-keyword">if</span> (fast == slow)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> finder = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            finder = nums[finder];<br>            slow = nums[slow];<br>            <span class="hljs-keyword">if</span> (slow==finder)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> finder;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>两种方案的时间复杂度都为o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>两种方案的空间复杂度都为o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="/2024/11/21/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <url>/2024/11/21/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>使用贪心算法，左右指针不断移动，每次移动短的边，因为移动长边必然导致容积减小；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>class Solution {<br>public:<br>    int maxArea(vector<int>&amp; height) {<br>        int result &#x3D; 0;</p><pre><code class="hljs">    int left = 0;    int right = height.size() -1;    while(left &lt; right)&#123;        result = max(result, (right - left) * min(height[left], height[right]));        if (height[left] &lt; height[right])&#123;            left++;        &#125;else&#123;            right--;        &#125;    &#125;    return result;&#125;</code></pre><p>};</p><pre><code class="hljs">### 时间复杂度+ 双指针遍历一次，时间复杂度o(n)。### 空间复杂度+ 定义了常数个变量，空间复杂度o(1)。</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在排序数组中查询元素的第一个和最后一个位置</title>
    <link href="/2024/11/21/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <url>/2024/11/21/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E8%AF%A2%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题考察数组和二分法；</li><li>1、我们需要分别找到不包含target的左边界，不包含target的右边界；</li><li>2、如果左右边界之间还有元素，说明找到了；</li><li>3、否则，说明数组中不存在元素，返回{-1,-1}</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>class Solution {<br>public:<br>    vector<int> searchRange(vector<int>&amp; nums, int target) {<br>        int leftBoard &#x3D; getLeftBoard(nums, target);<br>        int rightBoard &#x3D; getRightBoard(nums, target);</p><pre><code class="hljs">    if (rightBoard - leftBoard &gt; 1)&#123;        return &#123;leftBoard + 1, rightBoard -1&#125;;    &#125;    return &#123;-1, -1&#125;;&#125;int getLeftBoard(vector&lt;int&gt;&amp; nums, int target)&#123;    int left = 0;    int right = nums.size() -1;    while(left &lt;= right)&#123;        int middle = left + (right - left) / 2;        if (nums[middle] &gt;= target)&#123;            right = middle-1;        &#125;else&#123;            left = middle+1;        &#125;    &#125;    return right;&#125;int getRightBoard(vector&lt;int&gt;&amp; nums, int target)&#123;    int left = 0;    int right = nums.size() -1;    while(left &lt;= right)&#123;        int middle = left + (right - left) / 2;        if (nums[middle] &lt;= target)&#123;            left = middle+1;        &#125;else&#123;            right = middle-1;        &#125;    &#125;    return left;&#125;</code></pre><p>};</p><pre><code class="hljs">### 时间复杂度+ 每次是进行了二分，左右边界各做了一次，所以时间复杂度为o(logn)。### 空间复杂度+ 我们空间应该只用到了常数个，所以空间复杂度为o(1)。</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>心情记录</title>
    <link href="/2024/11/21/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/11/21/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="ft-cy记录"><a href="#ft-cy记录" class="headerlink" title="ft cy记录"></a>ft cy记录</h3><ul><li>这是我工作以来，第一次经历这种事情，是有点懵的，下午3点多接到通知，马上办手续，当天走完流程，所有手续和行李当天处理完；</li><li>说实话，这里做的事情确实都不是我愿意做的，什么事情都无法强求吧，接受就好；</li><li>这一年以来，自己也尝试过主动融入，也有过一些收获（包括四星），但是终究不合适，真的就是不合适；</li><li>从eric，kevinzhu，jarvix，甚至包括alex的离职来看，这个岗位要求的是服从性，是根据老板的想法做事，对技术的要求真的很低，这一点大家都很清楚；</li><li>而我的内心总是希望做一些更有难度，有施展空间的事情，特别是在见识了eric的强大工程能力之后，对做大项目又一些向往，对工程也不排斥了，甚至有点享受这种geek的感觉；</li></ul><h3 id="自我认识"><a href="#自我认识" class="headerlink" title="自我认识"></a>自我认识</h3><ul><li>我喜欢技术，希望通过技术得到认可；</li><li>我愿意接受改变，也乐于学习；</li><li>心态还可，很多事情比较佛系，不太计较，当然也会又些不够敏感，不能察觉外界的一些情绪变化；</li></ul><h3 id="未来期许"><a href="#未来期许" class="headerlink" title="未来期许"></a>未来期许</h3><ul><li>希望自己能够继续在算法这条道路走下去；</li><li>能够做一个自己相对喜爱的领域（薪资应该不会太差）；</li><li>不下牌桌，不断跟现实抗争，多向上看看，看看大佬的格局；</li><li>成熟一些，能够给家人提供情绪价值，安抚家人。</li></ul>]]></content>
    
    
    <categories>
      
      <category>心路历程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>不同路径</title>
    <link href="/2024/11/19/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <url>/2024/11/19/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题居然是一道动态规划的题目</li><li>1、我们初始化一个二维数组，dp[i][j]，含义是到下标为(i,j)位置一共有dp[i][j]种走法；</li><li>2、首先，dp[i][0]和dp[0][j]显然都为1，因为只有一种走法；</li><li>3、其次，递推公式是dp[i][j] &#x3D; dp[i-1][j] + dp[i][j-1];</li><li>4、最后，我们从上到下，从左到右遍历即可</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>class Solution {<br>public:</p><pre><code class="hljs">int uniquePaths(int m, int n) &#123;    vector&lt;vector&lt;int&gt;&gt; dp(m, vector&lt;int&gt;(n, 0));    for (int i = 0; i &lt; m; i++)&#123;        dp[i][0] = 1;    &#125;    for (int j = 0; j &lt; n; j++)&#123;        dp[0][j] = 1;    &#125;    for (int i = 1; i &lt; m; i++)&#123;        for (int j = 1; j &lt; n; j++)&#123;            dp[i][j] = dp[i-1][j] + dp[i][j-1];        &#125;    &#125;    return dp[m-1][n-1];&#125;</code></pre><p>};</p><pre><code class="hljs">### 时间复杂度+ 双层for循环遍历，所以时间复杂度为o(m*n)。### 空间复杂度+ 我们定义了一个新二维数组，所以空间复杂度为o(m*n)。</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>寻找旋转排序数组中的最小值</title>
    <link href="/2024/11/18/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <url>/2024/11/18/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>旋转数组可以使用二分法来做</li><li>1、如果二分之后nums[left] &lt; nums[right]表明，left到right都是有序区间，只需要在左侧元素和当前最小值中间取更小者即可；</li><li>2、否则的话，继续判断middle和left的关系，如果middle大于等于left，那么应该将left &#x3D; middle+1;</li><li>3、如果middle小于left，应该将right &#x3D; middle；</li><li>4、整体上我们使用的是左闭右开区间；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> result = INT_MAX;<br><br>        <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>            <span class="hljs-keyword">if</span> (nums[left] &lt; nums[right])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nums[left], result);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (nums[middle] &gt;= nums[left])&#123;<br>                    left = middle + <span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    right = middle;<br>                &#125;<br>            &#125;<br>        &#125;   <br><br>        <span class="hljs-keyword">return</span> nums[left];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>二分法时间复杂度为o(logn)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>只有常数个临时变量，空间复杂度为o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>子集</title>
    <link href="/2024/11/17/%E5%AD%90%E9%9B%86/"/>
    <url>/2024/11/17/%E5%AD%90%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>1、组合问题和分割问题都是收集树的叶子结点；</li><li>2、子集问题是收集所有节点；</li><li>3、子集问题是无序的，所以我们每次不能重复取值，回溯算法中的for循环要从start_index开始，而start_index需要递增；</li><li>4、递归三部曲，第一步是确定递归函数参数，这里应该有3个，包括二维数组（最终结果），path为子集收集元素，另外还需要start_index，确定遍历开始位置；</li><li>5、递归三部曲，第二步是确定终止条件，显然这里当start_index变成nums.size时，就应该终止了；</li><li>6、递归三部曲，第三步是确定单层循环的逻辑，我们需要先在path中加入当前元素，然后继续递归，最后回溯pop元素；</li><li>7、需要注意的是，这里回溯函数的第一行应该是收集子集到result中，否则结果会为空。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> result;<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; temp;<br><br>        <span class="hljs-built_in">dfs</span>(nums, temp, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, vector&lt;<span class="hljs-type">int</span>&gt;&amp; temp, <span class="hljs-type">int</span> start)</span></span>&#123;<br><br>        result.<span class="hljs-built_in">push_back</span>(temp);<br>        <br>        <span class="hljs-keyword">if</span> (start == nums.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            temp.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            <span class="hljs-built_in">dfs</span>(nums, temp, i<span class="hljs-number">+1</span>);<br>            temp.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>一共有2^n中状态，每中状态需要o(n)次操作，所以时间复杂度是o(n*2^n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>构建子集数组path，临时数组长度为n，所以空间复杂度为o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>和为k的子数组</title>
    <link href="/2024/11/17/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2024/11/17/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>我的理解是这道题考察的知识包括前缀和，unordered_map等知识</li><li>1、首先，我们会计算一个前缀和数组sum_array，方便后续查询；</li><li>2、其次，假设当前子数组的左侧边界为left，右侧边界为right，那么子数组的和可以用sum_array[right] - sum_array[left]表示，如果它正好等于k，则找到结果；</li><li>3、这个找的动作，我们可以使用unordered_map完成，时间复杂度更低，意味着我们需要将前缀和与出现次数保存在一个unordered_map中；</li><li>4、这样，我们就知道prefix_sum&#x3D;target的前缀数组有多少个</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// 使用一个unordered_map保存前缀和的数值及出现频次</span><br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; umap;<br>        <br>        <span class="hljs-comment">// 如果啥都不加，则默认前缀和为0</span><br>        umap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 用一个变量记录结果</span><br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 开始遍历数组，并统计数值</span><br>        <span class="hljs-type">int</span> prefix_sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-comment">// 先计算prefix_sum</span><br>            prefix_sum += nums[i];<br><br>            <span class="hljs-comment">// 寻找需要的子数组和</span><br>            <span class="hljs-keyword">auto</span> item = umap.<span class="hljs-built_in">find</span>(prefix_sum - k);<br>            <br>            <span class="hljs-comment">// 如果找到了，则更新结果</span><br>            <span class="hljs-keyword">if</span> (item != umap.<span class="hljs-built_in">end</span>())&#123;<br>                result += item-&gt;second;<br>            &#125;<br><br>            umap[prefix_sum]++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>我们只遍历了一遍，所以时间复杂度应该是o(n)，中间使用哈希表查询时间复杂度为O(1)，综合下来时间复杂度应该是o(1)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>我们新增了一个变量unordered_map，所以空间复杂度为o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>跳跃游戏</title>
    <link href="/2024/11/12/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/11/12/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>我们用一个变量cover动态的记录当前可以到达的最远位置；</li><li>贪心算法，当最远距离到到了边界，则返回true，否则返回false；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题和45题很像，只是需要返回的结果不一样，这里只需要返回true/false</span><br>    <span class="hljs-comment">// 所以，这里我们的代码也不一样</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canJump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> cover = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= cover; i++)&#123;<br>            cover = <span class="hljs-built_in">max</span>(cover, i + nums[i]);<br>            <span class="hljs-keyword">if</span> (cover &gt;= nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>没有额外的空间，所以时间复杂度是o(1)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>只新建了1个变量，所以空间复杂度为o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>跳跃游戏II</title>
    <link href="/2024/11/12/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/"/>
    <url>/2024/11/12/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>整体思路如下，我们需要记录一个当前覆盖最远距离下标和下一步覆盖最远距离下标</li><li>1、当移动下标到达了当前覆盖的最远距离下标时，我们必须再走一步才可以增加覆盖距离</li><li>2、当移动下标达到了当前覆盖最远距离时，如果不是集合终点，则步数加一，还可以继续走；</li><li>3、当移动下标达到了当前覆盖最远距离时，如果是集合终点，则不用走了</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 整体思路如下，我们需要记录一个当前覆盖最远距离下标和下一步覆盖最远距离下标</span><br>    <span class="hljs-comment">// 1、当移动下标到达了当前覆盖的最远距离下标时，我们必须再走一步才可以增加覆盖距离</span><br>    <span class="hljs-comment">// 2、当移动下标达到了当前覆盖最远距离时，如果不是集合终点，则步数加一，还可以继续走；</span><br>    <span class="hljs-comment">// 3、当移动下标达到了当前覆盖最远距离时，如果是集合终点，则不用走了</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> cur_longest = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> next_longest = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            next_longest = <span class="hljs-built_in">max</span>(next_longest, i + nums[i]);<br><br>            <span class="hljs-keyword">if</span> (i == cur_longest)&#123;<br>                <span class="hljs-keyword">if</span> (i != nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>)&#123;<br>                    result++;<br>                    cur_longest = next_longest;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>最多每个位置跳跃一次，所以时间复杂度为o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>只新建了三个变量，所以空间复杂度为o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>缺失的第一个正数</title>
    <link href="/2024/11/12/%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"/>
    <url>/2024/11/12/%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>1、首先，我们需要明确，nums中缺失的第一个正数一定是1～N+1之间，其中N为nums.size();</li><li>2、所以，我们应该将所有小于1或者大于N+1的值都设置为N+1</li><li>3、然后，我们开始遍历，我们假设1～N分别对应索引从0~N-1，那么我们遇到nums[i] 时，将nums[i]-1对应的索引位置元素置负，这样，所有出现过的正数对应的索引位置都为负数；</li><li>4、最后，我们从头开始遍历，就能知道缺失的第一个正数是什么了；</li><li>5、如果遍历到最后都没找到，意味着nums中包含了1～N的所有元素，返回N+1；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">firstMissingPositive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> N = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// 遍历找出所有小于等于0或者大于N+1的元素，置N+1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &lt; <span class="hljs-number">1</span> || nums[i] &gt; N<span class="hljs-number">+1</span>)&#123;<br>                nums[i] = N<span class="hljs-number">+1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 第二次遍历，开始重新赋值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-type">int</span> val = <span class="hljs-built_in">abs</span>(nums[i]);<br>            <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span> &amp;&amp; val &lt; N<span class="hljs-number">+1</span>)&#123;<br>                <span class="hljs-keyword">if</span> (nums[val<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>                    nums[val<span class="hljs-number">-1</span>] *= <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 从头开始找出第一个缺失的正数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> i<span class="hljs-number">+1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> N<span class="hljs-number">+1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>我们遍历了3次，所以时间复杂度仍然是o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>我们没有使用额外的空间，所以空间复杂度只有o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单词搜索</title>
    <link href="/2024/11/12/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/"/>
    <url>/2024/11/12/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>1、搜索问题，可以使用深度优先搜索解决，我们可以从任何一个位置开始，所以需要两层for循环遍历</li><li>2、dfs函数，我们需要传入board, row, col, index, visited, word</li><li>3、说到dfs就需要注意是否需要回溯，原则是这样的，如果我们每次做选择，可以走也可以不走，例如走迷宫，那么就需要回溯；而如果我们必须操作，例如求联通域面积，那么就不需要回溯；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、搜索问题，可以使用深度优先搜索解决，我们可以从任何一个位置开始，所以需要两层for循环遍历</span><br>    <span class="hljs-comment">// 2、dfs函数，我们需要传入board, row, col, index, visited, word</span><br>    <span class="hljs-comment">// 3、说到dfs就需要注意是否需要回溯，原则是这样的，如果我们每次做选择，可以走也可以不走，例如走迷宫，那么就需要回溯；而如果我们必须操作，例如求联通域面积，那么就不需要回溯；</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">exist</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = board.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">visited</span>(m, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n, <span class="hljs-literal">false</span>));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(board, visited, i, j, <span class="hljs-number">0</span>, word)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board, vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt;&amp; visited, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> index, string word)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == word.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (row &lt; <span class="hljs-number">0</span> || row &gt;= board.<span class="hljs-built_in">size</span>() || col &lt; <span class="hljs-number">0</span> || col &gt;=board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() || visited[row][col] || board[row][col] != word[index]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        visited[row][col] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(board, visited, row - <span class="hljs-number">1</span>, col, index + <span class="hljs-number">1</span>, word) ||<br>            <span class="hljs-built_in">dfs</span>(board, visited, row + <span class="hljs-number">1</span>, col, index + <span class="hljs-number">1</span>, word) ||<br>            <span class="hljs-built_in">dfs</span>(board, visited, row, col - <span class="hljs-number">1</span>, index + <span class="hljs-number">1</span>, word) ||<br>            <span class="hljs-built_in">dfs</span>(board, visited, row, col + <span class="hljs-number">1</span>, index + <span class="hljs-number">1</span>, word)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        visited[row][col] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>回溯算法的时间复杂度很高，时间复杂度为Θ(MN⋅3^L)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>我们新增了visited数组，所以空间复杂度为o(m<em>n)，同时栈的最大深度为o(max(L, M</em>N))。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>买卖股票的最佳时机III</title>
    <link href="/2024/11/12/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/"/>
    <url>/2024/11/12/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>dp[i][0] 不操作</li><li>dp[i][1] 第一次买入股票</li><li>dp[i][2] 第一次卖出股票</li><li>dp[i][3] 第二次买入股票</li><li>dp[i][4] 第二次卖出股票</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// dp[i][0] 不操作</span><br>    <span class="hljs-comment">// dp[i][1] 第一次买入股票</span><br>    <span class="hljs-comment">// dp[i][2] 第一次卖出股票</span><br>    <span class="hljs-comment">// dp[i][3] 第二次买入股票</span><br>    <span class="hljs-comment">// dp[i][4] 第二次卖出股票</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(prices.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>] = -prices[<span class="hljs-number">0</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-comment">// 当前不操作，意味着前一次也应该没有操作，因为状态是有顺序的</span><br>            dp[i][<span class="hljs-number">0</span>] = dp[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-comment">// 当前第一次买入状态</span><br>            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] - prices[i], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>            <span class="hljs-comment">// 当前第一次卖出状态</span><br>            dp[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>]);<br>            <span class="hljs-comment">// 当前第二次买入状态</span><br>            dp[i][<span class="hljs-number">3</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>] - prices[i], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">3</span>]);<br>            <span class="hljs-comment">// 当前第二次卖出状态</span><br>            dp[i][<span class="hljs-number">4</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">3</span>] + prices[i], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">4</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp[prices.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>][<span class="hljs-number">2</span>], dp[prices.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>][<span class="hljs-number">4</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序5次循环遍历了prices数组，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>显然，空间复杂度是o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>两个非重叠子数组的最大和</title>
    <link href="/2024/11/12/%E4%B8%A4%E4%B8%AA%E9%9D%9E%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <url>/2024/11/12/%E4%B8%A4%E4%B8%AA%E9%9D%9E%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>使用到了前缀和滑动窗口的概念</li><li>1、首先，如果整个窗口长度比firstLen+secondLen要小，显然没有结果</li><li>2、其次，我们从firstLen+secondLen-1的索引处开始遍历</li><li>3、每次，我们可以固定末尾向前倒数firstLen或者secondLen的数，然后在剩下的区间内寻找最大的子数组和</li><li>4、最后，将两种不同选择方式（firstLen在前和secondLen两种）的最大和与当前最大值进行比较，得到最大值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 使用到了前缀和滑动窗口的概念</span><br>    <span class="hljs-comment">// 1、首先，如果整个窗口长度比firstLen+secondLen要小，显然没有结果</span><br>    <span class="hljs-comment">// 2、其次，我们从firstLen+secondLen-1的索引处开始遍历</span><br>    <span class="hljs-comment">// 3、每次，我们可以固定末尾向前倒数firstLen或者secondLen的数，然后在剩下的区间内寻找最大的子数组和</span><br>    <span class="hljs-comment">// 4、最后，将两种不同选择方式（firstLen在前和secondLen两种）的最大和与当前最大值进行比较，得到最大值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSumTwoNoOverlap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> firstLen, <span class="hljs-type">int</span> secondLen)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span> (firstLen + secondLen &gt; nums.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 开始计算前缀和数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; prefix_sum = nums;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            prefix_sum[i] += prefix_sum[i<span class="hljs-number">-1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// 初始化左边max，右边max和结果max</span><br>        <span class="hljs-type">int</span> left_max = prefix_sum[firstLen<span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> right_max = prefix_sum[secondLen <span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> result_max = prefix_sum[firstLen + secondLen - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 开始遍历右指针</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = firstLen + secondLen; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            left_max = <span class="hljs-built_in">max</span>(left_max, prefix_sum[i - secondLen] - prefix_sum[i-secondLen - firstLen]);<br>            right_max = <span class="hljs-built_in">max</span>(right_max, prefix_sum[i - firstLen] - prefix_sum[i-firstLen-secondLen]);<br>            <span class="hljs-type">int</span> max_value = <span class="hljs-built_in">max</span>(left_max + prefix_sum[i] - prefix_sum[i-secondLen], right_max + prefix_sum[i] - prefix_sum[i-firstLen]);<br>            result_max = <span class="hljs-built_in">max</span>(result_max, max_value);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result_max;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>遍历了两遍数组，时间复杂度为o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>使用了一个额外的前缀和数组，空间复杂度为o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>柱状图中最大的矩阵</title>
    <link href="/2024/11/11/%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9F%A9%E9%98%B5/"/>
    <url>/2024/11/11/%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题主要考察单调栈，当右侧元素小于栈顶元素时，开始出栈，同时计算最大面积</li><li>这里需要特别注意起始和终止点必须添加一个0元素，防止纯递增&#x2F;递减矩阵</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题主要考察单调栈，当右侧元素小于栈顶元素时，开始出栈，同时计算最大面积</span><br>    <span class="hljs-comment">// 这里需要特别注意起始和终止点必须添加一个0元素，防止纯递增/递减矩阵</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestRectangleArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> </span>&#123;<br>        heights.<span class="hljs-built_in">insert</span>(heights.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">0</span>);<br>        heights.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br><br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> max_area = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; heights.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-comment">// 情况一，当前元素大于等于栈顶元素，直接入栈</span><br>            <span class="hljs-keyword">if</span> (heights[i] &gt;= heights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                st.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>            <span class="hljs-comment">// 情况二</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; heights[i] &lt; heights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                    <span class="hljs-type">int</span> middle_index = st.<span class="hljs-built_in">top</span>();<br>                    st.<span class="hljs-built_in">pop</span>();<br><br>                    <span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>())&#123;<br>                        <span class="hljs-type">int</span> left_index = st.<span class="hljs-built_in">top</span>();<br>                        <span class="hljs-type">int</span> w = i - left_index - <span class="hljs-number">1</span>;<br>                        <span class="hljs-type">int</span> h = heights[middle_index];<br>                        max_area = <span class="hljs-built_in">max</span>(max_area, w * h);<br>                    &#125;<br>                &#125;<br>                st.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max_area;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>只遍历了一遍，时间复杂度为o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>用了一个新数据结构栈，所以空间复杂度为o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="/2024/11/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2024/11/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察双指针，同时需要逆向思维；</li><li>从后面向前，但是要特别注意，我们从后向前是需要从大到小的获取数值。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题，首先很明确的是使用双指针来做，其次，它的关键在于使用逆向双指针</span><br>    <span class="hljs-comment">// 1、具体来说，由于nums1中包含了m+n个元素，所以我们从后先前不会覆盖原来nums1中已有的数值</span><br>    <span class="hljs-comment">// 2、如果一个数组遍历完了，应该用另外一个补充</span><br>    <span class="hljs-comment">// 3、最终我们会将所有数值都加入到数组1</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">int</span> first = m<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> second = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> tail = m + n <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> cur;<br><br>        <span class="hljs-comment">//只有当两个数组还有1个没有遍历完成，可以继续遍历</span><br>        <span class="hljs-keyword">while</span>(first &gt;= <span class="hljs-number">0</span> || second &gt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-number">-1</span>)&#123;<br>                cur = nums2[second];<br>                second--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (second == <span class="hljs-number">-1</span>)&#123;<br>                cur = nums1[first];<br>                first--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[first] &gt; nums2[second])&#123;<br>                cur = nums1[first];<br>                first--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur = nums2[second];<br>                second--;<br>            &#125;<br><br>            nums1[tail] = cur;<br>            tail--;<br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序遍历了一遍两个数组，所以渐进时间复杂度为O(m+n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>只有几个临时变量，所以空间复杂度为o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>有效三角形的个数</title>
    <link href="/2024/11/07/%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/11/07/%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>为了能够使用相向双指针，先对数组从小到大排序。</li><li>外层循环枚举 c&#x3D;nums[k]，内层循环用相向双指针枚举 a&#x3D;nums[i] 和 b&#x3D;nums[j]，具体如下：<ul><li>初始化左右指针 i&#x3D;0,j&#x3D;k−1。</li><li>如果 nums[i]+nums[j]&gt;c，由于数组是有序的，nums[j] 与下标 i′在 [i,j−1] 中的任何 nums[i′] 相加，都是 &gt;c 的，因此直接找到了 j−i 个合法方案，加到答案中，然后将 j 减一。</li><li>如果 nums[i]+nums[j]≤c，由于数组是有序的，nums[i] 与下标 j′在 [i+1,j] 中的任何 nums[j′] 相加，都是 ≤c 的，因此后面无需考虑 nums[i]，将 i 加一。</li><li>重复上述过程直到 i≥j 为止。</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">triangleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> c = nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">for</span> (; c &gt; <span class="hljs-number">1</span>; c--)&#123;<br>            <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> b = c <span class="hljs-number">-1</span>;<br><br>            <span class="hljs-keyword">while</span>(a &lt; b)&#123;<br>                <span class="hljs-keyword">if</span> (nums[a] + nums[b] &gt; nums[c])&#123;<br>                    result += b - a;<br>                    b--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    a++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>时间复杂度为O(n^2)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>空间复杂度o(1),只用到固定的变量数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最小路径和</title>
    <link href="/2024/11/06/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <url>/2024/11/06/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>考察动态规划和数组</li><li>由于只能向下和向右移动，那么我们当前位置的值只能根据左边和上边的数值来确定，自然就想到使用动态规划</li><li>需要注意，当上边或者左边遇到边界的处理方式，以及(0,0)位置的初始化。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 假设dp[i][j]是从左上角走到该位置的路径和</span><br>    <span class="hljs-comment">// 那么，有三种情况：</span><br>    <span class="hljs-comment">// 1、(i, j)位置的左侧没有到边界，上侧也没有到边界，那么dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];</span><br>    <span class="hljs-comment">// 2、（i, j)位置的左侧没有到边界，那么dp[i][j] = dp[i][j-1] + grid[i][j]</span><br>    <span class="hljs-comment">// 3、(i, j)位置的上侧没有到边界，那么dp[i][j] = dp[i-1][j] + grid[i][j]</span><br>    <span class="hljs-comment">// 4、最终，返回右下角的dp数值即可</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(grid.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(), <span class="hljs-number">0</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; grid.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-comment">// cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot;, j: &quot; &lt;&lt; j &lt;&lt; endl;</span><br>                <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>]) + grid[i][j];<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = dp[i<span class="hljs-number">-1</span>][j] + grid[i][j];<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = dp[i][j<span class="hljs-number">-1</span>] + grid[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[grid.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>][grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>两层for循环，时间复杂度为o(m*n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>创建了一个二维数组，分别是矩阵的长和宽，所以空间复杂度为O(m*n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>接雨水</title>
    <link href="/2024/11/06/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2024/11/06/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>思路居然异常简单</li><li>每个位置能接的水应该等于min(left_max - height[i], right_max) - height[i]</li><li>如果计算出来的值小于0，则不能接水</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 思路居然异常简单</span><br>    <span class="hljs-comment">// 1、每个位置能接的水应该等于min(left_max - height[i], right_max) - height[i]</span><br>    <span class="hljs-comment">// 2、如果计算出来的值小于0，则不能接水</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_max</span><span class="hljs-params">(height.size(), <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">right_max</span><span class="hljs-params">(height.size(), <span class="hljs-number">0</span>)</span></span>;<br><br>        left_max[<span class="hljs-number">0</span>] = height[<span class="hljs-number">0</span>];<br>        right_max[height.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>] = height[height.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; height.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            left_max[i] = <span class="hljs-built_in">max</span>(left_max[i<span class="hljs-number">-1</span>], height[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = height.<span class="hljs-built_in">size</span>() <span class="hljs-number">-2</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            right_max[j] = <span class="hljs-built_in">max</span>(right_max[j<span class="hljs-number">+1</span>], height[j]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; height.<span class="hljs-built_in">size</span>(); k++)&#123;<br>            <span class="hljs-type">int</span> val = <span class="hljs-built_in">min</span>(left_max[k], right_max[k]) - height[k];<br>            <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span>)&#123;<br>                result += val;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>需要新建两个vector，空间复杂度是o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大子数组和</title>
    <link href="/2024/11/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA1/"/>
    <url>/2024/11/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA1/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，也可以使用贪心算法做</li><li>动态规划，是在每一天设置两个状态，不持有股票和持有股票</li><li>贪心算法，是在每一天维护一个到当天位置的最小股价，然后用当前股价减去最小股价与历史最大收益比较，从而得到最大收益</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// dp[i][0]表示第i天不持有股票</span><br>    <span class="hljs-comment">// dp[i][1]表示第i天持有股票</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">dp</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i]);<br>            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(-prices[i], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 记录一个到当前位置的最小元素minVal</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> minVal = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            minVal = <span class="hljs-built_in">min</span>(minVal, prices[i]);<br>            result = <span class="hljs-built_in">max</span>(prices[i] - minVal, result);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>动态规划需要o(n)，而贪心算法需要o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大子数组和</title>
    <link href="/2024/11/05/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2024/11/05/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，我们用两个变量分别记录以当前数值结尾的最大子数组f(i)和以及最终结果；</li><li>我们在遍历的过程中，不断判断f(i-1)+nums[i]与nums[i]的大小，迭代f(i)；</li><li>同时，判断f(i)与result的大小，从而更新result；</li><li>最终，就得到了全局最大值；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> curMax = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = nums[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            curMax = <span class="hljs-built_in">max</span>(nums[i], curMax+nums[i]);<br>            result = <span class="hljs-built_in">max</span>(result, curMax);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>优化后，只使用了常数个临时变量作为辅助空间，与n无关，故渐进空间复杂度为O(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>下一个排列</title>
    <link href="/2024/11/05/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
    <url>/2024/11/05/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察数组操作，主要是考察问题拆解；</li><li>我们从最末位寻找最长的降序列表，例如为pos；</li><li>然后对pos到末尾进行逆序，得到一个升序子列表；</li><li>这时候，从pos开始，只需要寻找第一个比nums[pos-1]大的值，再将其与nums[pos-1]交换，就可以得到下一个排列；</li><li>需要注意，假设pos&#x3D;0，意味着，整个列表已经是最大倒序列表了，这时候，直接列表翻转就是答案。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、这道题考查下一个序列，我们考虑从后向前找到最长的降序列表</span><br>    <span class="hljs-comment">// 2、找到之后，假设位置为pos，那么这个列表是以0~pos-1为前缀的最大排列</span><br>    <span class="hljs-comment">// 3、我们要找下一个更大的排列，那么需要将pos-1的位置变得更大，同时pos~nums.size() -1的位置最小（升序）</span><br>    <span class="hljs-comment">// 4、所以，我们应该先将pos～nums.size() -1 翻转，变成升序，然后再从pos开始找第一个大于pos-1位置的值，交换一下，就能得到下一个排列</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pos = nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">while</span>(pos &gt;<span class="hljs-number">0</span> &amp;&amp; nums[pos<span class="hljs-number">-1</span>] &gt;= nums[pos])&#123;<br>            pos--;<br>        &#125;<br><br>        <span class="hljs-comment">// 现在从pos到nums.size() -1是最长的降序排列</span><br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>() + pos, nums.<span class="hljs-built_in">end</span>());<br>        <br>        <span class="hljs-comment">// 如果pos=0，那么当前就是最大排列</span><br>        <span class="hljs-comment">// 否则，从pos开始找第一个比pos-1大的值，找到后进行交换，就得到了最终结果</span><br>        <span class="hljs-keyword">if</span> (pos &gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> target = pos;<br>            <span class="hljs-keyword">for</span> (; target&lt;nums.<span class="hljs-built_in">size</span>(); target++)&#123;<br>                <span class="hljs-keyword">if</span> (nums[target] &gt; nums[pos<span class="hljs-number">-1</span>])&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(nums[target], nums[pos<span class="hljs-number">-1</span>]);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>我们最多遍历了两遍数组，同时翻转了一次，所以时间复杂度是o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>显然，这里的空间复杂度应该是o(1)，因为我们保存了常数个变量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>乘积最大子数组</title>
    <link href="/2024/11/04/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2024/11/04/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，特点是它可以通过优化，进一步降低空间复杂度；</li><li>我们需要维护两个变量，一个是当前最大乘积数组，一个是当前最小乘积数组；</li><li>然后在遍历过程中不断迭代更新，得到最终结果；</li><li>特别需要注意中间出现的元素0，任何包含0的数组的乘积都是0，所以需要特殊处理；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、按照第53题的思路，假设f(i)表示以i结尾的最大乘积可以考虑a和f(i-1)也可以单独成一段，即f(i) = max(f(i-1) * a, a)；</span><br>    <span class="hljs-comment">// 2、但是这里有点特别，我们可以有负数，所以我们维护一个以i结尾的最小乘积、最大乘积；</span><br>    <span class="hljs-comment">// 3、这样，我们就可以每次从三者中选择出新的最小乘积、最大乘积</span><br>    <span class="hljs-comment">// 4、另外，如果我们遇到nums[i] = 0的特殊情况，需要将curMin和curMax都置1，且result用0进行截断，因为连续数组中只要包含0，乘积就是0</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> curMin = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> curMax = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> result = INT_MIN;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>)&#123;<br>                curMax = <span class="hljs-number">1</span>;<br>                curMin = <span class="hljs-number">1</span>;<br>                result = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, result);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">int</span> temp = nums[i] * curMax;<br><br>            curMax = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(temp, curMin * nums[i]), nums[i]);<br>            curMin = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(temp, curMin * nums[i]), nums[i]);<br><br>            result = <span class="hljs-built_in">max</span>(curMax, result);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>优化后，只使用了常数个临时变量作为辅助空间，与n无关，故渐进空间复杂度为O(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大正方形</title>
    <link href="/2024/11/03/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/"/>
    <url>/2024/11/03/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，当前元素由左上，左和上三个位置的元素推导得出；</li><li>假设dp [i][j]表示的是以i,j坐标为右下角，且只包含1的正方形的边长最大值；</li><li>具体思路如下：<ul><li>首先，我们可以通过两层遍历，完成所有位置的计算；</li><li>其次，我们只需要考虑nums [j] &#x3D;&#x3D; 1的情况，因为如果等于0，显然dp [i][j]会等于0；<ul><li>当我们的i或者j有一个为0时，dp [i][j]会为1；</li><li>否则，我们需要通过左上，左和上三个位置的值计算当前位置，dp [i][j] &#x3D; min(dp [i-1][j], dp [i][j-1], dp [i-1][j-1]) + 1；</li></ul></li><li>我们在迭代的过程中，会记录一个当前的最大值，遍历完成之后，就是返回这个结果。</li></ul></li><li>需要注意的点：<ul><li>需要注意dp数组的定义：以i和j为右下角，且只包含1的正方形的边长的最大值；</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 使用到了动态规划算法，dp[i][j]代表以i,j为右下角，且只包含1的正方形的最大边长</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximalSquare</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br><span class="hljs-type">int</span> maxSide = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br><span class="hljs-type">int</span> col = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(row, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(col, <span class="hljs-number">0</span>));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++)&#123;<br><span class="hljs-keyword">if</span> (matrix[i][j] == <span class="hljs-string">&quot;1&quot;</span>)&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>) dp[i][j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span>&#123;<br>dp[i][j] = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>]), dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]) + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>maxSide = <span class="hljs-built_in">max</span>(maxSide, dp[i][j]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> maxSide * maxSide;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>由于需要遍历整个矩阵，所以时间复杂度是o(m * n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>由于初始化了一个dp二维数组，所以空间复杂度也是o(m * n)，当然可以优化成一维数组，那么就是o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单词拆分</title>
    <link href="/2024/11/03/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <url>/2024/11/03/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，特点是它是一个从后向前遍历的过程，遍历顺序很重要；</li><li>我们需要将一个字符串，拆分成好几个子字符串，当子字符串都能在wordDict中找到时，显然这个单词就是拆分成功的；</li><li>这种父问题和子问题类似的，就可以使用动态规划的方式求解；</li><li>首先，如果我们拆到了最后一个字符，显然就成功了，所以我们反向遍历，从后向前，当拆倒第0个字符时，就成功了；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题非常有意思哈，我们在思考的时候，可以从前向后进行思考，但是在推理的时候需要从后向前推理；</span><br>    <span class="hljs-comment">// 1、dp[i]代表以i为起始点的字符串是否可以由wordDict里面的元素拼接而成；</span><br>    <span class="hljs-comment">// 2、显然，我们知道dp[s.size()] = True，因为它不需要任何元素；</span><br>    <span class="hljs-comment">// 3、那么，我们向前计算，假设最后4个字符组成的元素在wordDict存在，那么显然dp[s.size() -4] = True，这里有两个条件，第一是后面4个字符串与wordDict中某个元素完全匹配，第二是dp[s.size()]等于True；</span><br>    <span class="hljs-comment">// 4、需要注意，我们在判断以某个位置为起始点，向后添加wordDict中某个元素的长度时，这个总长度不能超过s的长度，否则就越界了。</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">dp</span>(s.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>        dp[s.<span class="hljs-built_in">size</span>()] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>(); i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordDict.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                string word = wordDict[j];<br>                string sub = s.<span class="hljs-built_in">substr</span>(i, word.<span class="hljs-built_in">size</span>());<br>                <span class="hljs-keyword">if</span> (i + word.<span class="hljs-built_in">size</span>() &lt;= s.<span class="hljs-built_in">size</span>() &amp;&amp; sub == word)&#123;<br>                    dp[i] = dp[i+word.<span class="hljs-built_in">size</span>()];<br>                &#125;<br>                <span class="hljs-comment">// 当遇到一个可以拆分的时候就可以返回了</span><br>                <span class="hljs-keyword">if</span> (dp[i]) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>我们遍历了所有字符，同时每个字符又遍历了所有词典，所以时间复杂度应该是o(m * n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>显然，这里的空间复杂度应该是o(n)，因为我们保存了一个一维数组dp。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最长回文子串</title>
    <link href="/2024/11/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2024/11/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>最长回文子串是动态规划中一道非常经典的题目</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划；</li><li>首先，我们需要看到，它需要返回的是子串，而不是int类型的数值；</li><li>其次，我们可以知道，dp [i][j]是否是回文子串起始取决于dp [i+1][j-1]；</li><li>所以，我们通过两层for循环遍历，不断更新i和j的值，最后得到最长的回文子串；</li><li>需要注意，这里i的遍历顺序是从下向上，而j的遍历顺序是从左到右；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、使用动态规划的方法，dp[i][j]表示分别以i为起点和j为终点的子串是否为回文子串</span><br>    <span class="hljs-comment">// 2、当s[i] == s[j]时，才需要判断，这时如果j - i &lt;= 1，显然就是回文子串，否则需要判断dp[i+1][j-1]是否是回文子串；</span><br>    <span class="hljs-comment">// 3、显然，我们可以看出i是从下向上遍历，而j是从左向右遍历</span><br>    <span class="hljs-comment">// 4、最后，遍历的过程中，我们可以不断迭代left和right的位置，最终得到最长子串</span><br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">dp</span>(s.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(s.<span class="hljs-built_in">size</span>(), <span class="hljs-literal">false</span>));<br>        <span class="hljs-type">int</span> max_length = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> left = INT_MAX;<br>        <span class="hljs-type">int</span> right = INT_MIN;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span> (s[i] == s[j])&#123;<br>                    <span class="hljs-keyword">if</span> (j - i &lt;= <span class="hljs-number">1</span> || dp[i<span class="hljs-number">+1</span>][j<span class="hljs-number">-1</span>])&#123;<br>                        dp[i][j] = <span class="hljs-literal">true</span>;<br><br>                        <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> &gt; max_length)&#123;<br>                            left = i;<br>                            right = j;<br>                            max_length = j - i + <span class="hljs-number">1</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(left, max_length);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>这里，我们遍历两遍，时间复杂度是o(n^2)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>二维动态数组，显然空间复杂度也是o(n^2)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode-数组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/03/hello-world/"/>
    <url>/2024/11/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>init</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
