<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>两个非重叠子数组的最大和</title>
    <link href="/2024/11/12/%E4%B8%A4%E4%B8%AA%E9%9D%9E%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <url>/2024/11/12/%E4%B8%A4%E4%B8%AA%E9%9D%9E%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>使用到了前缀和滑动窗口的概念</li><li>1、首先，如果整个窗口长度比firstLen+secondLen要小，显然没有结果</li><li>2、其次，我们从firstLen+secondLen-1的索引处开始遍历</li><li>3、每次，我们可以固定末尾向前倒数firstLen或者secondLen的数，然后在剩下的区间内寻找最大的子数组和</li><li>4、最后，将两种不同选择方式（firstLen在前和secondLen两种）的最大和与当前最大值进行比较，得到最大值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 使用到了前缀和滑动窗口的概念</span><br>    <span class="hljs-comment">// 1、首先，如果整个窗口长度比firstLen+secondLen要小，显然没有结果</span><br>    <span class="hljs-comment">// 2、其次，我们从firstLen+secondLen-1的索引处开始遍历</span><br>    <span class="hljs-comment">// 3、每次，我们可以固定末尾向前倒数firstLen或者secondLen的数，然后在剩下的区间内寻找最大的子数组和</span><br>    <span class="hljs-comment">// 4、最后，将两种不同选择方式（firstLen在前和secondLen两种）的最大和与当前最大值进行比较，得到最大值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSumTwoNoOverlap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> firstLen, <span class="hljs-type">int</span> secondLen)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span> (firstLen + secondLen &gt; nums.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 开始计算前缀和数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; prefix_sum = nums;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            prefix_sum[i] += prefix_sum[i<span class="hljs-number">-1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// 初始化左边max，右边max和结果max</span><br>        <span class="hljs-type">int</span> left_max = prefix_sum[firstLen<span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> right_max = prefix_sum[secondLen <span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> result_max = prefix_sum[firstLen + secondLen - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 开始遍历右指针</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = firstLen + secondLen; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            left_max = <span class="hljs-built_in">max</span>(left_max, prefix_sum[i - secondLen] - prefix_sum[i-secondLen - firstLen]);<br>            right_max = <span class="hljs-built_in">max</span>(right_max, prefix_sum[i - firstLen] - prefix_sum[i-firstLen-secondLen]);<br>            <span class="hljs-type">int</span> max_value = <span class="hljs-built_in">max</span>(left_max + prefix_sum[i] - prefix_sum[i-secondLen], right_max + prefix_sum[i] - prefix_sum[i-firstLen]);<br>            result_max = <span class="hljs-built_in">max</span>(result_max, max_value);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result_max;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>遍历了两遍数组，时间复杂度为o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>使用了一个额外的前缀和数组，空间复杂度为o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>柱状图中最大的矩阵</title>
    <link href="/2024/11/11/%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9F%A9%E9%98%B5/"/>
    <url>/2024/11/11/%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题主要考察单调栈，当右侧元素小于栈顶元素时，开始出栈，同时计算最大面积</li><li>这里需要特别注意起始和终止点必须添加一个0元素，防止纯递增&#x2F;递减矩阵</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题主要考察单调栈，当右侧元素小于栈顶元素时，开始出栈，同时计算最大面积</span><br>    <span class="hljs-comment">// 这里需要特别注意起始和终止点必须添加一个0元素，防止纯递增/递减矩阵</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestRectangleArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> </span>&#123;<br>        heights.<span class="hljs-built_in">insert</span>(heights.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">0</span>);<br>        heights.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br><br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> max_area = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; heights.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-comment">// 情况一，当前元素大于等于栈顶元素，直接入栈</span><br>            <span class="hljs-keyword">if</span> (heights[i] &gt;= heights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                st.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>            <span class="hljs-comment">// 情况二</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; heights[i] &lt; heights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                    <span class="hljs-type">int</span> middle_index = st.<span class="hljs-built_in">top</span>();<br>                    st.<span class="hljs-built_in">pop</span>();<br><br>                    <span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>())&#123;<br>                        <span class="hljs-type">int</span> left_index = st.<span class="hljs-built_in">top</span>();<br>                        <span class="hljs-type">int</span> w = i - left_index - <span class="hljs-number">1</span>;<br>                        <span class="hljs-type">int</span> h = heights[middle_index];<br>                        max_area = <span class="hljs-built_in">max</span>(max_area, w * h);<br>                    &#125;<br>                &#125;<br>                st.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max_area;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>只遍历了一遍，时间复杂度为o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>用了一个新数据结构栈，所以空间复杂度为o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>合并两个有序数组</title>
    <link href="/2024/11/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2024/11/10/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察双指针，同时需要逆向思维；</li><li>从后面向前，但是要特别注意，我们从后向前是需要从大到小的获取数值。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题，首先很明确的是使用双指针来做，其次，它的关键在于使用逆向双指针</span><br>    <span class="hljs-comment">// 1、具体来说，由于nums1中包含了m+n个元素，所以我们从后先前不会覆盖原来nums1中已有的数值</span><br>    <span class="hljs-comment">// 2、如果一个数组遍历完了，应该用另外一个补充</span><br>    <span class="hljs-comment">// 3、最终我们会将所有数值都加入到数组1</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">int</span> first = m<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> second = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> tail = m + n <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> cur;<br><br>        <span class="hljs-comment">//只有当两个数组还有1个没有遍历完成，可以继续遍历</span><br>        <span class="hljs-keyword">while</span>(first &gt;= <span class="hljs-number">0</span> || second &gt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-number">-1</span>)&#123;<br>                cur = nums2[second];<br>                second--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (second == <span class="hljs-number">-1</span>)&#123;<br>                cur = nums1[first];<br>                first--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[first] &gt; nums2[second])&#123;<br>                cur = nums1[first];<br>                first--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur = nums2[second];<br>                second--;<br>            &#125;<br><br>            nums1[tail] = cur;<br>            tail--;<br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序遍历了一遍两个数组，所以渐进时间复杂度为O(m+n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>只有几个临时变量，所以空间复杂度为o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>有效三角形的个数</title>
    <link href="/2024/11/07/%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/11/07/%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>为了能够使用相向双指针，先对数组从小到大排序。</li><li>外层循环枚举 c&#x3D;nums[k]，内层循环用相向双指针枚举 a&#x3D;nums[i] 和 b&#x3D;nums[j]，具体如下：<ul><li>初始化左右指针 i&#x3D;0,j&#x3D;k−1。</li><li>如果 nums[i]+nums[j]&gt;c，由于数组是有序的，nums[j] 与下标 i′在 [i,j−1] 中的任何 nums[i′] 相加，都是 &gt;c 的，因此直接找到了 j−i 个合法方案，加到答案中，然后将 j 减一。</li><li>如果 nums[i]+nums[j]≤c，由于数组是有序的，nums[i] 与下标 j′在 [i+1,j] 中的任何 nums[j′] 相加，都是 ≤c 的，因此后面无需考虑 nums[i]，将 i 加一。</li><li>重复上述过程直到 i≥j 为止。</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">triangleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> c = nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">for</span> (; c &gt; <span class="hljs-number">1</span>; c--)&#123;<br>            <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> b = c <span class="hljs-number">-1</span>;<br><br>            <span class="hljs-keyword">while</span>(a &lt; b)&#123;<br>                <span class="hljs-keyword">if</span> (nums[a] + nums[b] &gt; nums[c])&#123;<br>                    result += b - a;<br>                    b--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    a++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>时间复杂度为O(n^2)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>空间复杂度o(1),只用到固定的变量数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最小路径和</title>
    <link href="/2024/11/06/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <url>/2024/11/06/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>考察动态规划和数组</li><li>由于只能向下和向右移动，那么我们当前位置的值只能根据左边和上边的数值来确定，自然就想到使用动态规划</li><li>需要注意，当上边或者左边遇到边界的处理方式，以及(0,0)位置的初始化。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 假设dp[i][j]是从左上角走到该位置的路径和</span><br>    <span class="hljs-comment">// 那么，有三种情况：</span><br>    <span class="hljs-comment">// 1、(i, j)位置的左侧没有到边界，上侧也没有到边界，那么dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];</span><br>    <span class="hljs-comment">// 2、（i, j)位置的左侧没有到边界，那么dp[i][j] = dp[i][j-1] + grid[i][j]</span><br>    <span class="hljs-comment">// 3、(i, j)位置的上侧没有到边界，那么dp[i][j] = dp[i-1][j] + grid[i][j]</span><br>    <span class="hljs-comment">// 4、最终，返回右下角的dp数值即可</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(grid.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(), <span class="hljs-number">0</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; grid.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-comment">// cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot;, j: &quot; &lt;&lt; j &lt;&lt; endl;</span><br>                <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>]) + grid[i][j];<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = dp[i<span class="hljs-number">-1</span>][j] + grid[i][j];<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = dp[i][j<span class="hljs-number">-1</span>] + grid[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[grid.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>][grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>两层for循环，时间复杂度为o(m*n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>创建了一个二维数组，分别是矩阵的长和宽，所以空间复杂度为O(m*n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>接雨水</title>
    <link href="/2024/11/06/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2024/11/06/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>思路居然异常简单</li><li>每个位置能接的水应该等于min(left_max - height[i], right_max) - height[i]</li><li>如果计算出来的值小于0，则不能接水</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 思路居然异常简单</span><br>    <span class="hljs-comment">// 1、每个位置能接的水应该等于min(left_max - height[i], right_max) - height[i]</span><br>    <span class="hljs-comment">// 2、如果计算出来的值小于0，则不能接水</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_max</span><span class="hljs-params">(height.size(), <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">right_max</span><span class="hljs-params">(height.size(), <span class="hljs-number">0</span>)</span></span>;<br><br>        left_max[<span class="hljs-number">0</span>] = height[<span class="hljs-number">0</span>];<br>        right_max[height.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>] = height[height.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; height.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            left_max[i] = <span class="hljs-built_in">max</span>(left_max[i<span class="hljs-number">-1</span>], height[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = height.<span class="hljs-built_in">size</span>() <span class="hljs-number">-2</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            right_max[j] = <span class="hljs-built_in">max</span>(right_max[j<span class="hljs-number">+1</span>], height[j]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; height.<span class="hljs-built_in">size</span>(); k++)&#123;<br>            <span class="hljs-type">int</span> val = <span class="hljs-built_in">min</span>(left_max[k], right_max[k]) - height[k];<br>            <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span>)&#123;<br>                result += val;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>需要新建两个vector，空间复杂度是o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大子数组和</title>
    <link href="/2024/11/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA1/"/>
    <url>/2024/11/05/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA1/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，也可以使用贪心算法做</li><li>动态规划，是在每一天设置两个状态，不持有股票和持有股票</li><li>贪心算法，是在每一天维护一个到当天位置的最小股价，然后用当前股价减去最小股价与历史最大收益比较，从而得到最大收益</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// dp[i][0]表示第i天不持有股票</span><br>    <span class="hljs-comment">// dp[i][1]表示第i天持有股票</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">dp</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>));<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i]);<br>            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(-prices[i], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 记录一个到当前位置的最小元素minVal</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> minVal = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            minVal = <span class="hljs-built_in">min</span>(minVal, prices[i]);<br>            result = <span class="hljs-built_in">max</span>(prices[i] - minVal, result);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>动态规划需要o(n)，而贪心算法需要o(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大子数组和</title>
    <link href="/2024/11/05/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2024/11/05/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，我们用两个变量分别记录以当前数值结尾的最大子数组f(i)和以及最终结果；</li><li>我们在遍历的过程中，不断判断f(i-1)+nums[i]与nums[i]的大小，迭代f(i)；</li><li>同时，判断f(i)与result的大小，从而更新result；</li><li>最终，就得到了全局最大值；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> curMax = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = nums[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            curMax = <span class="hljs-built_in">max</span>(nums[i], curMax+nums[i]);<br>            result = <span class="hljs-built_in">max</span>(result, curMax);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>优化后，只使用了常数个临时变量作为辅助空间，与n无关，故渐进空间复杂度为O(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>下一个排列</title>
    <link href="/2024/11/05/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
    <url>/2024/11/05/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察数组操作，主要是考察问题拆解；</li><li>我们从最末位寻找最长的降序列表，例如为pos；</li><li>然后对pos到末尾进行逆序，得到一个升序子列表；</li><li>这时候，从pos开始，只需要寻找第一个比nums[pos-1]大的值，再将其与nums[pos-1]交换，就可以得到下一个排列；</li><li>需要注意，假设pos&#x3D;0，意味着，整个列表已经是最大倒序列表了，这时候，直接列表翻转就是答案。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、这道题考查下一个序列，我们考虑从后向前找到最长的降序列表</span><br>    <span class="hljs-comment">// 2、找到之后，假设位置为pos，那么这个列表是以0~pos-1为前缀的最大排列</span><br>    <span class="hljs-comment">// 3、我们要找下一个更大的排列，那么需要将pos-1的位置变得更大，同时pos~nums.size() -1的位置最小（升序）</span><br>    <span class="hljs-comment">// 4、所以，我们应该先将pos～nums.size() -1 翻转，变成升序，然后再从pos开始找第一个大于pos-1位置的值，交换一下，就能得到下一个排列</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pos = nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">while</span>(pos &gt;<span class="hljs-number">0</span> &amp;&amp; nums[pos<span class="hljs-number">-1</span>] &gt;= nums[pos])&#123;<br>            pos--;<br>        &#125;<br><br>        <span class="hljs-comment">// 现在从pos到nums.size() -1是最长的降序排列</span><br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>() + pos, nums.<span class="hljs-built_in">end</span>());<br>        <br>        <span class="hljs-comment">// 如果pos=0，那么当前就是最大排列</span><br>        <span class="hljs-comment">// 否则，从pos开始找第一个比pos-1大的值，找到后进行交换，就得到了最终结果</span><br>        <span class="hljs-keyword">if</span> (pos &gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> target = pos;<br>            <span class="hljs-keyword">for</span> (; target&lt;nums.<span class="hljs-built_in">size</span>(); target++)&#123;<br>                <span class="hljs-keyword">if</span> (nums[target] &gt; nums[pos<span class="hljs-number">-1</span>])&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(nums[target], nums[pos<span class="hljs-number">-1</span>]);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>我们最多遍历了两遍数组，同时翻转了一次，所以时间复杂度是o(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>显然，这里的空间复杂度应该是o(1)，因为我们保存了常数个变量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>乘积最大子数组</title>
    <link href="/2024/11/04/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2024/11/04/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，特点是它可以通过优化，进一步降低空间复杂度；</li><li>我们需要维护两个变量，一个是当前最大乘积数组，一个是当前最小乘积数组；</li><li>然后在遍历过程中不断迭代更新，得到最终结果；</li><li>特别需要注意中间出现的元素0，任何包含0的数组的乘积都是0，所以需要特殊处理；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、按照第53题的思路，假设f(i)表示以i结尾的最大乘积可以考虑a和f(i-1)也可以单独成一段，即f(i) = max(f(i-1) * a, a)；</span><br>    <span class="hljs-comment">// 2、但是这里有点特别，我们可以有负数，所以我们维护一个以i结尾的最小乘积、最大乘积；</span><br>    <span class="hljs-comment">// 3、这样，我们就可以每次从三者中选择出新的最小乘积、最大乘积</span><br>    <span class="hljs-comment">// 4、另外，如果我们遇到nums[i] = 0的特殊情况，需要将curMin和curMax都置1，且result用0进行截断，因为连续数组中只要包含0，乘积就是0</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> curMin = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> curMax = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> result = INT_MIN;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>)&#123;<br>                curMax = <span class="hljs-number">1</span>;<br>                curMin = <span class="hljs-number">1</span>;<br>                result = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, result);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">int</span> temp = nums[i] * curMax;<br><br>            curMax = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(temp, curMin * nums[i]), nums[i]);<br>            curMin = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(temp, curMin * nums[i]), nums[i]);<br><br>            result = <span class="hljs-built_in">max</span>(curMax, result);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>程序一次循环遍历了nums，所以渐进时间复杂度为O(n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>优化后，只使用了常数个临时变量作为辅助空间，与n无关，故渐进空间复杂度为O(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最大正方形</title>
    <link href="/2024/11/03/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/"/>
    <url>/2024/11/03/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，当前元素由左上，左和上三个位置的元素推导得出；</li><li>假设dp [i][j]表示的是以i,j坐标为右下角，且只包含1的正方形的边长最大值；</li><li>具体思路如下：<ul><li>首先，我们可以通过两层遍历，完成所有位置的计算；</li><li>其次，我们只需要考虑nums [j] &#x3D;&#x3D; 1的情况，因为如果等于0，显然dp [i][j]会等于0；<ul><li>当我们的i或者j有一个为0时，dp [i][j]会为1；</li><li>否则，我们需要通过左上，左和上三个位置的值计算当前位置，dp [i][j] &#x3D; min(dp [i-1][j], dp [i][j-1], dp [i-1][j-1]) + 1；</li></ul></li><li>我们在迭代的过程中，会记录一个当前的最大值，遍历完成之后，就是返回这个结果。</li></ul></li><li>需要注意的点：<ul><li>需要注意dp数组的定义：以i和j为右下角，且只包含1的正方形的边长的最大值；</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 使用到了动态规划算法，dp[i][j]代表以i,j为右下角，且只包含1的正方形的最大边长</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximalSquare</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br><span class="hljs-type">int</span> maxSide = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br><span class="hljs-type">int</span> col = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(row, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(col, <span class="hljs-number">0</span>));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; col; j++)&#123;<br><span class="hljs-keyword">if</span> (matrix[i][j] == <span class="hljs-string">&quot;1&quot;</span>)&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>) dp[i][j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span>&#123;<br>dp[i][j] = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>]), dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]) + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>maxSide = <span class="hljs-built_in">max</span>(maxSide, dp[i][j]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> maxSide * maxSide;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>由于需要遍历整个矩阵，所以时间复杂度是o(m * n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>由于初始化了一个dp二维数组，所以空间复杂度也是o(m * n)，当然可以优化成一维数组，那么就是o(n)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单词拆分</title>
    <link href="/2024/11/03/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <url>/2024/11/03/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划，特点是它是一个从后向前遍历的过程，遍历顺序很重要；</li><li>我们需要将一个字符串，拆分成好几个子字符串，当子字符串都能在wordDict中找到时，显然这个单词就是拆分成功的；</li><li>这种父问题和子问题类似的，就可以使用动态规划的方式求解；</li><li>首先，如果我们拆到了最后一个字符，显然就成功了，所以我们反向遍历，从后向前，当拆倒第0个字符时，就成功了；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 这道题非常有意思哈，我们在思考的时候，可以从前向后进行思考，但是在推理的时候需要从后向前推理；</span><br>    <span class="hljs-comment">// 1、dp[i]代表以i为起始点的字符串是否可以由wordDict里面的元素拼接而成；</span><br>    <span class="hljs-comment">// 2、显然，我们知道dp[s.size()] = True，因为它不需要任何元素；</span><br>    <span class="hljs-comment">// 3、那么，我们向前计算，假设最后4个字符组成的元素在wordDict存在，那么显然dp[s.size() -4] = True，这里有两个条件，第一是后面4个字符串与wordDict中某个元素完全匹配，第二是dp[s.size()]等于True；</span><br>    <span class="hljs-comment">// 4、需要注意，我们在判断以某个位置为起始点，向后添加wordDict中某个元素的长度时，这个总长度不能超过s的长度，否则就越界了。</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">dp</span>(s.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>        dp[s.<span class="hljs-built_in">size</span>()] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>(); i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordDict.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                string word = wordDict[j];<br>                string sub = s.<span class="hljs-built_in">substr</span>(i, word.<span class="hljs-built_in">size</span>());<br>                <span class="hljs-keyword">if</span> (i + word.<span class="hljs-built_in">size</span>() &lt;= s.<span class="hljs-built_in">size</span>() &amp;&amp; sub == word)&#123;<br>                    dp[i] = dp[i+word.<span class="hljs-built_in">size</span>()];<br>                &#125;<br>                <span class="hljs-comment">// 当遇到一个可以拆分的时候就可以返回了</span><br>                <span class="hljs-keyword">if</span> (dp[i]) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>我们遍历了所有字符，同时每个字符又遍历了所有词典，所以时间复杂度应该是o(m * n)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>显然，这里的空间复杂度应该是o(n)，因为我们保存了一个一维数组dp。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最长回文子串</title>
    <link href="/2024/11/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2024/11/03/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>最长回文子串是动态规划中一道非常经典的题目</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>这道题是考察动态规划；</li><li>首先，我们需要看到，它需要返回的是子串，而不是int类型的数值；</li><li>其次，我们可以知道，dp [i][j]是否是回文子串起始取决于dp [i+1][j-1]；</li><li>所以，我们通过两层for循环遍历，不断更新i和j的值，最后得到最长的回文子串；</li><li>需要注意，这里i的遍历顺序是从下向上，而j的遍历顺序是从左到右；</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1、使用动态规划的方法，dp[i][j]表示分别以i为起点和j为终点的子串是否为回文子串</span><br>    <span class="hljs-comment">// 2、当s[i] == s[j]时，才需要判断，这时如果j - i &lt;= 1，显然就是回文子串，否则需要判断dp[i+1][j-1]是否是回文子串；</span><br>    <span class="hljs-comment">// 3、显然，我们可以看出i是从下向上遍历，而j是从左向右遍历</span><br>    <span class="hljs-comment">// 4、最后，遍历的过程中，我们可以不断迭代left和right的位置，最终得到最长子串</span><br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">dp</span>(s.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(s.<span class="hljs-built_in">size</span>(), <span class="hljs-literal">false</span>));<br>        <span class="hljs-type">int</span> max_length = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> left = INT_MAX;<br>        <span class="hljs-type">int</span> right = INT_MIN;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span> (s[i] == s[j])&#123;<br>                    <span class="hljs-keyword">if</span> (j - i &lt;= <span class="hljs-number">1</span> || dp[i<span class="hljs-number">+1</span>][j<span class="hljs-number">-1</span>])&#123;<br>                        dp[i][j] = <span class="hljs-literal">true</span>;<br><br>                        <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> &gt; max_length)&#123;<br>                            left = i;<br>                            right = j;<br>                            max_length = j - i + <span class="hljs-number">1</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(left, max_length);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>这里，我们遍历两遍，时间复杂度是o(n^2)。</li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>二维动态数组，显然空间复杂度也是o(n^2)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/03/hello-world/"/>
    <url>/2024/11/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
